buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Throwable ignored) {
        return "unknown"
    }
}

String semver = "${version_major}.${version_minor}.${version_patch}"

String build_number = System.getenv("PROMOTED_NUMBER");
if (build_number == null)
    build_number = System.getenv("BUILD_NUMBER")
if (build_number == null)
    build_number = getGitRef()

version = "${semver}+${build_number}"
group = mod_group
archivesBaseName = "${mod_name.replace(' ', '-').replace("(", "").replace(")", "")}-MC${minecraft_version}"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    embed
    implementation.extendsFrom embed
}

repositories {
    mavenCentral()
    flatDir {
        dirs '../ceres/build/libs', '../sedna/build/libs'
    }
    maven {
        url "http://maven.cil.li"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    embed('li.cil.ceres:ceres:0.0.2+') { transitive = false }
    embed('li.cil.sedna:sedna:0.0.1+') { transitive = false }
    embed('li.cil.sedna:sedna-buildroot:0.0.1+') { transitive = false }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand([
                'mod_version'          : version,
                'mod_name'             : mod_name,
                'mod_url'              : mod_url,
                'mod_issues_url'       : mod_issues_url,
                'forge_version_min'    : forge_version_min,
                'minecraft_version_min': minecraft_version_min
        ])
    }
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                oc2 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                oc2 {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            args '--mod', 'oc2-sedna', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                oc2 {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    finalizedBy 'reobfJar'

    configurations.embed.each {
        from(project.zipTree(it)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    manifest {
        attributes([
                "Specification-Title"     : "oc2-sedna",
                "Specification-Vendor"    : "Sangar",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${semver}",
                "Implementation-Vendor"   : "Sangar",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url System.getenv("MAVEN_PATH")
        }
    }
}
